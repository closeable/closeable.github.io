(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{426:function(a,t,e){"use strict";e.r(t);var r=e(14),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"从paxos到raft（二）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从paxos到raft（二）"}},[a._v("#")]),a._v(" 从Paxos到Raft（二）")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),e("p",[a._v("文章内容仅是我个人的小总结，资历有限，如有误还请指正。")])]),a._v(" "),e("h3",{attrs:{id:"raft协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raft协议"}},[a._v("#")]),a._v(" Raft协议")]),a._v(" "),e("p",[a._v("由于Paxos的复杂性，Raft作者提出了一个简单容易理解的一致性算法，即Raft。\nRaft主要由3部分组成。")]),a._v(" "),e("ul",[e("li",[a._v("Leader选择")]),a._v(" "),e("li",[a._v("日志复制")]),a._v(" "),e("li",[a._v("安全性")])]),a._v(" "),e("h3",{attrs:{id:"leader选举"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#leader选举"}},[a._v("#")]),a._v(" Leader选举")]),a._v(" "),e("p",[a._v("在Raft中，存在三种角色，Leader，Follower，Candidate。\n"),e("img",{attrs:{src:"img.png",alt:"img.png"}}),a._v("\n他们之间的状态转换如图所示。")]),a._v(" "),e("ul",[e("li",[a._v("Follower：完全被动，不能发送任何请求，只接受并响应来自 leader 和 candidate 的 日志，每个节点启动后的初始状态一定是 follower")]),a._v(" "),e("li",[a._v("Candidate：用来竞选一个新 leader （candidate 由 follower 触发超时而来）")]),a._v(" "),e("li",[a._v("Leader： Candidate需要经过大多数节点的选举，当选举数超过所有节点一半时，即选定此节点未Leader。 为了避免同一时间存在多名Candidate同时选举，从Follower到Candidate会存在一个选举超时时间，\n这个时间是一个随机时间，一般情况下在150-300ms。Leader选举完成后，它处理所有来自客户端的请求，以及复制 日志 到所有 followers。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"img_1.png",alt:"img_1.png"}}),a._v("\nRaft 把时间分割成任意长度的任期，每选举一次，任期加1。如果一个Candidate赢得选举，然后他就在接下来的任期内充当Leader的职责。")]),a._v(" "),e("h3",{attrs:{id:"日志复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志复制"}},[a._v("#")]),a._v(" 日志复制")]),a._v(" "),e("p",[a._v("一旦一个领导人被选举出来，他就开始为客户端提供服务。\n"),e("img",{attrs:{src:"img_2.png",alt:"img_2.png"}}),a._v("\n日志复制，日志包含 任期id，日志索引，和日志内容。\n为了简化日志复制，Raft规定日志索引必须是连续的。\n日志复制满足二阶段提交，当日志从Leader传输到Follower的时候，只有大多数节点确认时，Leader才会提交日志。")]),a._v(" "),e("h3",{attrs:{id:"安全性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[a._v("#")]),a._v(" 安全性")]),a._v(" "),e("p",[a._v("选举限制（Leader 完整性）：每次选举出来的 Leader，必须包含所有已提交的日志")]),a._v(" "),e("ul",[e("li",[a._v("只有已经被大部分节点复制的日志，才会变成“已提交”")]),a._v(" "),e("li",[a._v("一个 Candidate 必须得到大部分节点投票，才能变成 Leader")]),a._v(" "),e("li",[a._v("投票时，节点不会把票投给没有自己的日志新的 Candidate")])]),a._v(" "),e("p",[a._v("Follower 或 Candidate 崩溃：无限重试")]),a._v(" "),e("p",[a._v("超时和可用性：broadcastTime（广播时间）<< electionTimeout（选举超时时间）<< MTBF（平均故障间隔时间)")]),a._v(" "),e("h3",{attrs:{id:"脑裂问题-集群配置变更"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脑裂问题-集群配置变更"}},[a._v("#")]),a._v(" 脑裂问题--集群配置变更")]),a._v(" "),e("p",[a._v("当集群新增加节点时，如果没有有效的措施，有可能会产生2个Leader。\n"),e("img",{attrs:{src:"img_3.png",alt:"img_3.png"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);